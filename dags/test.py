"""
test
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
from astro.table import Table, Metadata
import pandas as pd
import pendulum

@aql.dataframe(task_id="load")
def load_func():
    import pandas as pd
    
    # use pandas to load the titanic dataset from github
    return pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv')

@aql.run_raw_sql(conn_id="bigquery", task_id="over_18", results_format="pandas_dataframe")
def over_18_func(load: Table):
    return """
    -- use SQL to filter out passengers under 18
    -- note that we can reference the output of the load cell using the {{load}} syntax
    SELECT *
    FROM {{load}}
    WHERE age > 18
    """

@aql.run_raw_sql(conn_id="bigquery", task_id="aggregate_sql", results_format="pandas_dataframe")
def aggregate_sql_func(over_18: Table):
    return """
    -- use SQL to calculate the average age and count of passengers by survival and class
    SELECT
        alive,
        class,
        avg(age) as avg_age,
        count(*) as count
    FROM {{over_18}}
    GROUP BY alive, class
    """

default_args={
    "owner": "Michael Walker,Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule=None,
    start_date=pendulum.from_format("2024-02-09", "YYYY-MM-DD"),
    catchup=False,
    owner_links={
        "Michael Walker": "mailto:michael@brontecapital.com",
        "Open in Cloud IDE": "https://cloud.astronomer.io/clsds2o5603wn01qj17yi1nx5/cloud-ide/clse5cxam042701rzfvd0u86a/clse5evm2041w01rl3k10puh2",
    },
)
def test():
    load = load_func()

    over_18 = over_18_func(
        load,
    )

    aggregate_sql = aggregate_sql_func(
        over_18,
    )

dag_obj = test()

dag_obj = test()
